cbuffer PixelMatrixBuffer
{
	float4x4 LightViewProjection;
	float4x4 InvViewProj;
	float4x4 InvView;
};


SamplerState samplers[2]; //0 == linear sampler, 1 == point
Texture2D shaderTextures[4]; // 0 = color, light = 1, 2 = shadow depth, 3 = normal depth

struct VertexShaderOutput
{
		float4 Position : SV_POSITION;
		float2 TexCoord : TEXCOORD0;
		float4 ScreenPosition : TEXCOORD1;
		float4 ViewPosition : TEXCOORD2;
};

half4 ComposePixelShader(VertexShaderOutput input) : SV_Target0
{
		input.ScreenPosition.xy /= input.ScreenPosition.w;

		//specular intensity is stored in the color map's alpha channel.
		float3 baseColor = shaderTextures[0].Sample(samplers[0], input.TexCoord).rgb;
		float depth = shaderTextures[3].Sample(samplers[1], input.TexCoord);
		float4 light = shaderTextures[1].Sample(samplers[0], input.TexCoord);
		float3 diffuseLight = light.rgb;
		float specularLight = light.a;
		
		//http://www.gamedev.net/topic/636669-deferred-renderer-shadow-mapping/
		
		float4 position;
		position = (input.ViewPosition * depth);

		float4 positionWorldSpace = mul(position, InvView);

		float4 texcoord = mul(positionWorldSpace, LightViewProjection);

		texcoord /= texcoord.w;

		float realDistanceToLight = texcoord.z;

		float2 sampleLightScreen;
		sampleLightScreen.x = texcoord.x * 0.5f + 0.5f;
		sampleLightScreen.y = (-texcoord.y * 0.5f + 0.5f);

		float shadowMultiplier = 1.0f;

		if(!(sampleLightScreen.x > 1 || sampleLightScreen.x < 0 || sampleLightScreen.y > 1 || sampleLightScreen.y < 0))
		{	
				float distanceStoredInDepthMap = shaderTextures[2].Sample(samplers[1], sampleLightScreen);

				if((realDistanceToLight - 0.0002f) > distanceStoredInDepthMap)
					shadowMultiplier = 0.3f;
		}

		//Not going to apply specular here, it'll be applied in the final composition stage.
		return half4(baseColor * shadowMultiplier * (diffuseLight + specularLight), 1.0f);
}