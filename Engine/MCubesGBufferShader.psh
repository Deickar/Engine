struct VertexShaderOutput
{
	float4 Position : SV_POSITION;
	float3 WorldNormal : NORMAL;
	float4 WorldPosition : TEXCOORD0;
	float Depth : TEXCOORD1;
	float LerpValues : TEXCOORD2;
	uint IDValues : BLENDINDICES;
};

struct PixelShaderOutput
{
	float4 Color : SV_TARGET0; //R8G8B8A8
	float4 Normal : SV_TARGET1; //R8G8B8A8
	float Depth : SV_TARGET2; //R32
};

Texture2DArray shaderTextures;
SamplerState textureSampler;

//Normal Encoding Function
half3 Encode(half3 n)
{
	half p = sqrt(n.z*8+8);
	return half3(n.xy/p + 0.5,0);

	return n;
}

void ExtractMaterialAndTextureID(int encodedValue, out int texture1, out int texture2, out int material1, out int material2)
{
	//http://stackoverflow.com/questions/7787423/c-get-nth-byte-of-integer
	texture1  =		(encodedValue >> 24	) & 0xff;
	texture2 =		(encodedValue >> 16	) & 0xff;
	material1 =		(encodedValue >> 8	) & 0xff;
	material2 =		(encodedValue >> 0	) & 0xff;
}

//When it gets read in other shaders it gets multiplied back to 255.
float EncodeMaterialID(float id)
{
	return (id / 255.0f);
}

PixelShaderOutput MCubesGBufferPixelShader(VertexShaderOutput input)
{
	PixelShaderOutput output;

	float3 UpNormal = float3(0.0f, 1.0f, 0.0f);

	//Create weights for color interpolation based on world-space normal of surface
	float tighten = 0.3f; 
	float3 NormalizedWorldNormal = normalize(input.WorldNormal.xyz);

	float3 blend_weights = abs(NormalizedWorldNormal);     
	blend_weights = (blend_weights - tighten) * 7;  // Tighten up the blending zone
	blend_weights = max(blend_weights, 0);
	blend_weights /= (blend_weights.x + blend_weights.y + blend_weights.z).xxx; // Force weights to sum to 1.0 (very important!)  

	float scale = 0.3f;
	float dotResult = dot(UpNormal, NormalizedWorldNormal);

	float3 YZCoord;
	float3 XZCoord;
	float3 XYCoord;

	float4 YZColor;
	float4 XZColor;
	float4 XYColor;

	//TODO: Get material and tex IDs
	int tex1, tex2, mat1, mat2;

	ExtractMaterialAndTextureID(input.IDValues, tex1, tex2, mat1, mat2);

	YZCoord = float3(input.WorldPosition.yz * scale, 2.0f);  
	XZCoord = float3(input.WorldPosition.xz * scale, tex1);  
	XYCoord = float3(input.WorldPosition.xy * scale, 2.0f);

	output.Normal.w = EncodeMaterialID(mat1); //Set and save material to grass
	output.Normal.z = EncodeMaterialID(mat2);

	YZColor = shaderTextures.Sample(textureSampler, YZCoord);
	XYColor = shaderTextures.Sample(textureSampler, XYCoord);
	
	//We want to have a transitional phase between snow and grass.
	if(input.LerpValues > 0.01f)
	{
		float lerpModifier = input.LerpValues; //Meaning it goes from 0.0f to 1.0f
		float3 firstCoords = float3(input.WorldPosition.xz * scale, 1.0f);
		float3 secondCoords = float3(input.WorldPosition.xz * scale, 4.0f);

		XZColor = lerp(shaderTextures.Sample(textureSampler, firstCoords), shaderTextures.Sample(textureSampler, secondCoords), lerpModifier);
	}
	else
	{
		XZColor = shaderTextures.Sample(textureSampler, XZCoord);
	}
	
	output.Color = ((XZColor * blend_weights.y) + (YZColor * blend_weights.x) + (XYColor * blend_weights.z));
	output.Color.w = 1.0f;

	output.Normal.xyz = Encode(NormalizedWorldNormal); //revert the normal output to [0,1] space then assign it to the output normal map's RGB channel
	output.Depth = (input.Depth);

	return output;
}