/////////////
// GLOBALS //
/////////////
Texture2DArray shaderTexture;
SamplerState SampleType;

struct VertexShaderOutput
{
	float4 Position : SV_POSITION;
	float4 TexCoord : TEXCOORD0;
};

float2 ComputeMoments(float depth)  
{ 
	float2 moments;
	 
	// First moment is normal depth.  
	moments.x = depth;
	moments.y = moments.x*moments.x;

	// Compute partial derivatives of depth.  
	float dx = ddx(depth);  
	float dy = ddy(depth);

	// Compute second moment over the pixel extents.  
	moments.y += 0.25*(dx*dx + dy*dy);

	return moments;
};

float2 DepthOnlyPixelShader(VertexShaderOutput input) : SV_Target0
{
	if(0.1f >= shaderTexture.Sample(SampleType, input.TexCoord.xyz).w)
	{
		discard;
	}

	return ComputeMoments(input.TexCoord.w); //I store postProj.z/w depth in texcoord.w. I pack everything into a float4 to save space.
};