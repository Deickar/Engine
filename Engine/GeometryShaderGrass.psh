/////////////
// GLOBALS //
/////////////
Texture2DArray shaderTexture;
SamplerState linearSampler;

//////////////
// TYPEDEFS //
//////////////
struct PixelShaderInput
{
	float4 Position : SV_POSITION;
	float3 Normal :	NORMAL;
	float4 TexCoord : TEXCOORD0;
};

struct PixelShaderOutput
{
	half4 Color : SV_TARGET0; //R8G8B8A8
	float4 Normal : SV_TARGET1; //R8G8B8A8
	float Depth : SV_TARGET2; //R32
};

////////////////////////////////////////////////////////////////////////////////
// Functions
////////////////////////////////////////////////////////////////////////////////
//Since it's an 8bit UNORM channel, it means every value will end up in the 0..1 spectrum, so we have to do some trickery to save it and unload it properly.
float EncodeMaterialID(float id)
{
	return (id / 255.0f);
}

//http://aras-p.info/texts/CompactNormalStorage.html#method04spheremap
//Normal Encoding Function
float2 Encode(float3 n)
{
	float p = sqrt(n.z*8.0f+8.0f);
	return float2(n.xy/p + 0.5f);
}

////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
PixelShaderOutput GeometryGrassPixelShader(PixelShaderInput input)
{
	//Viewspace depth is saved in the .w channel. Divide it by screen's farClip.
	float depth = (input.TexCoord.w / 500.0f);

	if(depth > 0.7f)
	{
		discard;
	}

	PixelShaderOutput output;
	float fadeValue =  (depth*depth); //depth; //

	//No branching cuz texture array. Yay. To clarify -- our texCoord.z channel contains texture ID, which we extract from each instance of vegetation.
	//output.Color = lerp(shaderTexture.Sample(linearSampler, input.TexCoord.xyz), float4(0.2f, 0.3f, 0.2f, 0.3f), depth);
	output.Color = shaderTexture.Sample(linearSampler, input.TexCoord.xyz);

	//I fade in the alpha depending on depth, to make the vegetation appear smoothly. Works pretty well despite its' simplicity.
	if((output.Color.w * fadeValue) >= 0.7f) //Alpha testing and tiny optimization for the break-early cases.
	{
		discard;
	}

	output.Depth = depth;

	output.Normal.xy = Encode(normalize(input.Normal));

	//This is our material ID. Our normal map is R8G8B8A8, so our z and w channels each have 8 bits == 255 possible values.
	output.Normal.zw = EncodeMaterialID(4.0f);

	return output;
}