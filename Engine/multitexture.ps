////////////////////////////////////////////////////////////////////////////////
// Filename: multitexture.ps
////////////////////////////////////////////////////////////////////////////////

/////////////
// GLOBALS //
/////////////
Texture2D shaderTextures[2];
SamplerState SampleType;

cbuffer TextureMultiplierBuffer
{
		float2 texMultipliers; //I send this in so that I can regulate how "transparent" each of the 2 textures are.
};


//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
};

////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 MultiTexturePixelShader(PixelInputType input) : SV_TARGET
{
    float4 color1;
    float4 color2;
    float4 blendColor;

    // Get the pixel color from the first texture.
    color1 = shaderTextures[0].Sample(SampleType, input.tex);

    // Get the pixel color from the second texture.
    color2 = shaderTextures[1].Sample(SampleType, input.tex);
		
		// Blend the two pixels together and multiply by the gamma value.
		if(texMultipliers.x > 0.1f && texMultipliers.y > 0.1f)
		{
			  blendColor = color1 * color2 * 2.0; //2.0 as it is close to most monitors' gamma value.
		}
		else if(texMultipliers.x > 0.1f)
		{
				blendColor = color1;
		}
		else if(texMultipliers.y > 0.1f)
		{
				blendColor = color2;
		}
		else
		{
				//Bith failed the test. Output is transparent.
				blendColor.xyzw = 0.0;
		}	

    // Saturate the final color.
    blendColor = saturate(blendColor);

    return blendColor;
}