/////////////
// GLOBALS //
/////////////
Texture2DArray shaderTexture;
SamplerState linearSampler;

//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
	float4 Position : SV_POSITION;
	float4 Normal : NORMAL;
	float2 TexCoord : TEXCOORD0;
	int TextureID : TEXCOORD1;
};

struct PixelShaderOutput
{
	half4 Color : SV_TARGET0; //R8G8B8A8
	half4 Normal : SV_TARGET1; //R8G8B8A8
	float Depth : SV_TARGET2; //R32
};

////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
PixelShaderOutput VegetationQuadPixelShader(PixelInputType input)
{
	PixelShaderOutput output;

	output.Color = half4(0.0f, 0.0f, 0.0f, 0.0f);
	half4 tempColor = output.Color;

	float3 samplingCoords = float3(input.TexCoord, input.TextureID); //Add textureID to Z channel so that we can sample dynamically

	tempColor = shaderTexture.Sample(linearSampler, samplingCoords); //No branching, cuz texture array. Yay.

	if(tempColor.a >= 0.05f)
	{
		output.Color.xyz = tempColor.xyz;
		output.Color.a = 1.0f;
	}
	
	output.Depth = (input.Position.z / input.Position.w);
	output.Normal = input.Normal;

	return output;
}