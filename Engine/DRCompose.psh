SamplerState samplers[2]; //0 == linear sampler, 1 == point
Texture2D shaderTextures[3]; // 0 = color, light = 1, 2 = normal depth

struct VertexShaderOutput
{
		float4 Position : SV_POSITION;
		float2 TexCoord : TEXCOORD0;
};

half4 ComposePixelShader(VertexShaderOutput input) : SV_Target0
{
		float depth = shaderTextures[2].Sample(samplers[1], input.TexCoord);
		float3 baseColor = shaderTextures[0].Sample(samplers[0], input.TexCoord).rgb;

		if(depth <= 0) //Skip as early as possible if this pixel isn't supposed to be lit.
		{
			return float4(baseColor, 1.0f);
		}

		//http://www.iquilezles.org/www/articles/ssao/ssao.htm

		//specular intensity is stored in the color map's alpha channel.
		float4 light = shaderTextures[1].Sample(samplers[0], input.TexCoord);
		float3 diffuseLight = light.rgb;
		float specularLight = light.a;
		
		//Not going to apply specular here, it'll be applied in the final composition stage.
		return half4(baseColor * (diffuseLight + specularLight), 1.0f);
}