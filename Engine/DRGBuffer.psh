struct VertexShaderOutput
{
	float4 Position : SV_POSITION;
	float3 WorldNormal : NORMAL;
	float2 TexCoord : TEXCOORD0;
	float4 WorldPosition : TEXCOORD1;
	float ViewDepth : TEXCOORD2;
};

struct PixelShaderOutput
{
	float4 Color : SV_TARGET0; //R8G8B8A8
	float4 Normal : SV_TARGET1; //R8G8B8A8
	float Depth : SV_TARGET2; //R32
};

cbuffer PixelShaderBuffer
{
	float FarZ;
	float3 Padding;
}

//http://aras-p.info/texts/CompactNormalStorage.html#method04spheremap
//Normal Encoding Function
float2 Encode(float3 n)
{
	float p = sqrt(n.z*8.0f+8.0f);
	return float2(n.xy/p + 0.5f);
}

//When it gets read in other shaders it gets multiplied back to 255.
float EncodeMaterialID(float id)
{
	return (id / 255.0f);
}

Texture2D shaderTexture;
SamplerState textureSampler;

static const float textureScale = 0.2f;
static const float tighten = 0.45f;

PixelShaderOutput GBufferPixelShader(VertexShaderOutput input)
{
	PixelShaderOutput output;

	float3 normalizedWorldNormal = normalize(input.WorldNormal);

	//Create weights for color interpolation based on world-space normal of surface
	float3 blend_weights = abs(normalizedWorldNormal);     
	blend_weights = (blend_weights - tighten) * 7;  // Tighten up the blending zone
	blend_weights = max(blend_weights, 0.0f);
	blend_weights /= (blend_weights.x + blend_weights.y + blend_weights.z).xxx; // Force weights to sum to 1.0 (very important!)  

	//float2 YZCoord = input.WorldPosition.yz * scale;  
	//float2 ZXCoord = input.WorldPosition.xz * scale;  
	//float2 XYCoord = input.WorldPosition.xy * scale; 

	float4 YZColor = shaderTexture.Sample(textureSampler, input.WorldPosition.yz * textureScale);
	float4 XZColor = shaderTexture.Sample(textureSampler, input.WorldPosition.xz * textureScale);
	float4 XYColor = shaderTexture.Sample(textureSampler, input.WorldPosition.xy * textureScale);
	
	output.Color = ((XZColor * blend_weights.y) + (YZColor * blend_weights.x) + (XYColor * blend_weights.z));
	output.Color.w = 1.0f;

	output.Normal.xy = Encode(normalizedWorldNormal);
	output.Normal.zw = EncodeMaterialID(1.0f); //TODO: send in material IDs

	output.Depth = (input.ViewDepth / FarZ); //Store depth linearly.

	return output;
}

/*
// Determine the blend weights for the 3 planar projections.  
// N_orig is the vertex-interpolated normal vector.  
float3 blend_weights = abs( N_orig.xyz );   // Tighten up the blending zone:  
blend_weights = (blend_weights - 0.2) * 7;  
blend_weights = max(blend_weights, 0);      // Force weights to sum to 1.0 (very important!)  
blend_weights /= (blend_weights.x + blend_weights.y + blend_weights.z ).xxx;   

// Now determine a color value and bump vector for each of the 3  
// projections, blend them, and store blended results in these two  
// vectors:  
float4 blended_color; // .w hold spec value  

float3 blended_bump_vec;  
{ 
// Compute the UV coords for each of the 3 planar projections.  
// tex_scale (default ~ 1.0) determines how big the textures appear.  
float2 coord1 = v2f.wsCoord.yz * tex_scale;  
float2 coord2 = v2f.wsCoord.zx * tex_scale;  
float2 coord3 = v2f.wsCoord.xy * tex_scale; 
 
// This is where you would apply conditional displacement mapping.  
//if (blend_weights.x > 0) coord1 = . . .  
//if (blend_weights.y > 0) coord2 = . . .  
//if (blend_weights.z > 0) coord3 = . . .  

// Sample color maps for each projection, at those UV coords.  
float4 col1 = colorTex1.Sample(coord1);  
float4 col2 = colorTex2.Sample(coord2);  
float4 col3 = colorTex3.Sample(coord3);  

// Sample bump maps too, and generate bump vectors.  
// (Note: this uses an oversimplified tangent basis.)  
float2 bumpFetch1 = bumpTex1.Sample(coord1).xy - 0.5;  
float2 bumpFetch2 = bumpTex2.Sample(coord2).xy - 0.5;  
float2 bumpFetch3 = bumpTex3.Sample(coord3).xy - 0.5;  
float3 bump1 = float3(0, bumpFetch1.x, bumpFetch1.y);  
float3 bump2 = float3(bumpFetch2.y, 0, bumpFetch2.x);  
float3 bump3 = float3(bumpFetch3.x, bumpFetch3.y, 0);
  
 // Finally, blend the results of the 3 planar projections.  
blended_color = col1.xyzw * blend_weights.xxxx +  
				col2.xyzw * blend_weights.yyyy +  
				col3.xyzw * blend_weights.zzzz;

blended_bump_vec = bump1.xyz * blend_weights.xxx +  
				   bump2.xyz * blend_weights.yyy +  
				   bump3.xyz * blend_weights.zzz;  
}  
// Apply bump vector to vertex-interpolated normal vector.  
float3 N_for_lighting = normalize(N_orig + blended_bump);  
*/