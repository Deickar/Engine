
/********************************************************************************/
/*						TODO AND THINGS OF THAT SORT							*/
/********************************************************************************/

TODO prio list:
	1. Fix SSAO. 
		-> WorldView instead of View? Inverse->Transpose instead of Transpose?
		-> Just use the method I've always used in directional light shader?

	2. Networking -> cstdint and the like for all values sent/received

	3. Move ambient light to compose shader. dirlight shader will only do shadows + diffuse light... makes sense.

	4. Try to find what is  causing crashes bugs and crashes when recreating terrain

	5.	Possibly buffer everything you send in an update and send it all in one big packet?

	http://www.gamedev.net/topic/544909-view-space-directional-light/

Features:
* Make different sorts of packets for things. NameChange, ColourChange. Etc. PlayerData struct? Server map is <uint, PlayerData>. Socket will be contained in PlayerData.
	-> http://content.gpwiki.org/Binary_Packet_Code
	-> http://www.gamedev.net/index.php?app=forums&module=forums&section=rules&f=15 Q15

* Split GameConsoleWindow up into two types. Have one ... ChatRoom? That inherits from ConsoleWindow. 
	-> ConsoleWindow will only have the text parsing/printing stuff. ChatRoom will have all the namechanging and colourchanging and shit as well.
	-> Meaning that you can have a console window that only renders text that you send to it, without any of the naming/colouring stuff.

* In the future, it would probably be relevant to try and implement texture ID per vertex. One uint, two IDs bitshifted into each 16 bits. To blend between them you'd use some form of noise map.
	if(id >= 16 bits of value)
	{
		//Means that the second part of the uint contains something, so we blend
		get id2 by bitshifting

		blend between two ids by using some form of seamless noise map
	}

* TODO: Instead of a map... Maybe use four 2D vectors. One for -1-1, one for -1 1, one for 1 -1 and one for 1 1 ... should work fine

* Depth only OBJ shader for shadow stage

* Non-simplex/perlin smooth noise
	-> Using this function, stuff like waves, marble etc will be possible

* Simple rain or snow screen shader 

* Spotlight shader

* RTW shadowmapping < Cuz it's fuckin' awesome.

* Make geometry shader grass more fancy.
	-Should pretty much be finished now, just need to do the lookup-based-on-height thing.

* Particles
	-> Finally look into compute shader..?

* Water normal texture sliding thing that they do in arma2

########## Idea regarding vegetation lookup table ##################

First you have a lookup texture, a 1DTextureArray that has the same amount of textures as you have height in the world. You index into this texture array with the grassquad's worldPos.Y
Each texture has the first pixel allocated to the amount of textures ID there are for this height. So you read the first pixel value to know how many textures there are in this texture.
Then, when you know how many textures there are, you randomly select which texture you want to use. And then Load(1+(RandomVal*AmountOfTextures)). 
1+ because you don't want to use the first pixel in the texture.

Then you use the loaded texture ID to sample from your texture2DArray

###################################################################

Rendering and general layout of rendering system:
http://gamedev.stackexchange.com/questions/22080/which-of-these-directx11-calls-actually-sends-data-to-the-gpu
http://www.dataorienteddesign.com/dodmain/node14.html
http://www.bitsquid.se/presentations/benefits-of-a-data-driven-renderer.pdf

Directional light lens flare:
http://www.madgamedev.com/post/2010/04/21/Article-Sun-and-Lens-Flare-as-a-Post-Process.aspx
http://stackoverflow.com/questions/14161727/hlsl-drawing-a-centered-circle
if dot(cameraDirection, lightDirection) == -1 then they're both facing opposite ways I think

GPU Particles:
http://www.gamedev.net/topic/644489-gpu-particles/
http://directtovideo.wordpress.com/2009/10/06/a-thoroughly-modern-particle-system/
http://realtimecollisiondetection.net/blog/?p=91
http://http.developer.nvidia.com/GPUGems3/gpugems3_ch23.html

*/

TODO: Slerp.

// Special Thanks to Johnathan, Shaun and Geof!
Vector3 Slerp(Vector3 start, Vector3 end, float percent)
{
	 // Dot product - the cosine of the angle between 2 vectors.
	 float dot = Vector3.Dot(start, end);     
	 // Clamp it to be in the range of Acos()
	 // This may be unnecessary, but floating point
	 // precision can be a fickle mistress.
	 Mathf.Clamp(dot, -1.0f, 1.0f);
	 // Acos(dot) returns the angle between start and end,
	 // And multiplying that by percent returns the angle between
	 // start and the final result.
	 float theta = Mathf.Acos(dot)*percent;
	 Vector3 RelativeVec = end - start*dot;
	 RelativeVec.Normalize();     // Orthonormal basis
	 // The final result.
	 return ((start*Mathf.Cos(theta)) + (RelativeVec*Mathf.Sin(theta)));
}


TODO: Instead of map, use four 2D vectors?
enum ChunkDirection
{
	NW = 0,
	NE = 1,
	SE = 2,
	SW = 3
}

void GetChunkIndex(int x, int z, unsigned int& outXIndex, unsigned int& outZIndex) //, ChunkDirection& outDirection
{
	//East
	if(x >= 0)
	{
		//North east
		if(z >= 0)
		{
			//outDirection = NE;
			outXIndex = abs(x);
			outZIndex = abs(z);
		}
		//South east
		else
		{
			//outDirection = SE;
			outXIndex = abs(x);
			outZIndex = abs(z)-1;
		}
	}
	//West
	else 
	{
		//North west
		if(z >= 0)
		{
			//outDirection = NW;
			outXIndex = abs(x)-1;
			outZIndex = abs(z);
		}
		//South west
		else
		{
			//outDirection = SW;
			outXIndex = abs(x)-1;
			outZIndex = abs(z)-1;
		}
	}
}