Texture2D normalTexture : register( ps_5_0, t0 );
Texture2D waterTexture : register( ps_5_0, t1 );
SamplerState linearSampler;

cbuffer PixelMatrixBuffer
{
	float4x4 World : packoffset(c0.x);
	float waterColorStartOffset : packoffset(c4.x);
	float waterColorMultiplier	: packoffset(c4.y);
};

struct PSInput
{
	float4 Position : SV_POSITION;
	float4 TexCoord	: TEXCOORD0; //xy channels are real texture coordinates. .z channel is height offset for coloring etc. .w channel is viewspace depth.
};

struct PSOutput
{
	float4 Color : SV_TARGET0; //R8G8B8A8
	float3 Normal : SV_TARGET1; //R11G11B10
	float Depth : SV_TARGET2; //R32
	float4 Material : SV_TARGET3;
};

//http://aras-p.info/texts/CompactNormalStorage.html#method04spheremap
//Normal Encoding Function
half2 Encode(half3 n)
{
	half p = sqrt(n.z*8+8);
	return half2(n.xy/p + 0.5);
}

//Since it's an 8bit UNORM channel, it means every value will end up in the 0..1 spectrum, so we have to do some trickery to save it and unload it properly.
//When it gets read in other shaders it gets multiplied back to 255.
float EncodeMaterialID(float id)
{
	return (id / 1024.0f);
}

static const float3 UpNormal = float3(1.0f, 1.4f, 1.0f);

PSOutput WaterShaderPS(PSInput input)
{
	PSOutput output;

	//Offset by 0.2f and scale the rest by 0.8f to make the avg. color brighter while maintaining the same max value.
	float waterColorOffset = 1.0f / (0.001f+(3.5f - waterColorStartOffset + (input.TexCoord.z * waterColorMultiplier)));

	//Depth has been stored in normal .w channel.
	output.Depth = input.TexCoord.w;

	float4 PreCalcNormal = float4(UpNormal * (normalTexture.SampleLevel(linearSampler, input.TexCoord.xy * 1.5f, 0).xyz), 1.0f);

	output.Normal = normalize(mul(PreCalcNormal, (float3x3)World)).xyz;

	output.Material.xy = EncodeMaterialID(6.0f); //Both channels are reserved for material ID. Assign the water material.

	//So my mode of thinking here is that the higher the water is, the brighter the colors I want. 
	//I feel this reflects reality because more light escapes the thinner the water is, if you know what I mean.
	output.Color = saturate(float4(0.0f, 0.35f, 0.5f, 0.95f) * float4(waterColorOffset, waterColorOffset, waterColorOffset, 1.0f));

	return output;
}