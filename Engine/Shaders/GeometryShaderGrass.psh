/////////////
// GLOBALS //
/////////////
Texture2DArray shaderTexture;
SamplerState linearSampler;

//////////////
// TYPEDEFS //
//////////////
struct PixelShaderInput
{
	float4 Position : SV_POSITION;
	float4 Normal :	TEXCOORD0;
	float4 TexCoord : TEXCOORD1;
	float Opacity : OPACITY;
};

struct PixelShaderOutput
{
	float4 Color : SV_TARGET0; //R8G8B8A8
	float4 Normal : SV_TARGET1; //R8G8B8A8
	float Depth : SV_TARGET2; //R32
};

////////////////////////////////////////////////////////////////////////////////
// Functions
////////////////////////////////////////////////////////////////////////////////
//Since it's an 8bit UNORM channel, it means every value will end up in the 0..1 spectrum, so we have to do some trickery to save it and unload it properly.
float EncodeMaterialID(float id)
{
	return (id / 255.0f);
}

//http://aras-p.info/texts/CompactNormalStorage.html#method04spheremap
//Normal Encoding Function
float2 Encode(float3 n)
{
	float p = sqrt(n.z*8.0f+8.0f);
	return float2(n.xy/p + 0.5f);
}

//Essentially the ease curve will accentuate a value towards the extremes; 
//if it's a low value, it'll become lower, if it's a high value it'll become higher.
//If it's avg it won't move very much.
float PerlinEaseCurve(float value)
{
	//Algorithmically speaking: 3p² - 2p³
	return	(3.0f * (value*value) - (2.0f * (value*value*value)));
}


////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
PixelShaderOutput GrassPS(PixelShaderInput input)
{
	PixelShaderOutput output;

	//TODO:  Do something like this? Scale transparency with texCoord
	/* 
	//compute distance from center
	float distance = color.a > 0.3f?length(TexCoord - 0.5f):1.0f;
	*/

	output.Color = shaderTexture.Sample(linearSampler, input.TexCoord.xyz);

	//Scale transparency with our opacity that is itself based on view distance. We do this to fade in new grass quads to counteract "popping".
	output.Color.w *= saturate(PerlinEaseCurve(input.Opacity));
	
	//Viewspace depth is saved in the .w channel.
	output.Depth = input.TexCoord.w;

	//Encode normal into .xy channels
	output.Normal.xy = Encode(normalize(input.Normal.xyz));
	
	//This is our material ID. Our normal map is R8G8B8A8, so our z and w channels each have 8 bits == 255 possible values.
	output.Normal.zw = EncodeMaterialID(4.0f);

	return output;
}