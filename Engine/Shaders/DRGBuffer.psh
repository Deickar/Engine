struct VertexShaderOutput
{
	float4 Position : SV_POSITION;
	float3 WorldNormal : NORMAL;
	float2 TexCoord : TEXCOORD0;
	float4 WorldPosition : TEXCOORD1;
};

struct PixelShaderOutput
{
	float4 Color : SV_TARGET0; //R8G8B8A8
	float3 Normal : SV_TARGET1; //R8G8B8A8
	float Depth : SV_TARGET2; //R32
	float4 Material : SV_TARGET3;
};

cbuffer PixelShaderBuffer
{
	float farClip		: packoffset(c0.x);
	float textureScale  : packoffset(c0.y);
	float tighten		: packoffset(c0.z);
}

//http://aras-p.info/texts/CompactNormalStorage.html#method04spheremap
//Normal Encoding Function
half2 Encode(half3 n)
{
	half p = sqrt(n.z*8+8);
	return half2(n.xy/p + 0.5);
}

//When it gets read in other shaders it gets multiplied back to 255.
float EncodeMaterialID(float id)
{
	return (id / 1024.0f);
}

Texture2D shaderTexture;
SamplerState textureSampler;

//static const float textureScale = 0.2f;
//static const float tighten = 0.45f;

PixelShaderOutput GBufferPixelShader(VertexShaderOutput input)
{
	PixelShaderOutput output;

	float3 normalizedWorldNormal = normalize(input.WorldNormal);

	//Create weights for color interpolation based on world-space normal of surface
	float3 blend_weights = abs(normalizedWorldNormal);     
	blend_weights = (blend_weights - tighten) * 7;  // Tighten up the blending zone
	blend_weights = max(blend_weights, 0.0f);
	blend_weights /= (blend_weights.x + blend_weights.y + blend_weights.z).xxx; // Force weights to sum to 1.0 (very important!)  

	//float2 YZCoord = input.WorldPosition.yz * scale;  
	//float2 ZXCoord = input.WorldPosition.xz * scale;  
	//float2 XYCoord = input.WorldPosition.xy * scale; 

	float4 YZColor = shaderTexture.Sample(textureSampler, input.WorldPosition.yz * textureScale);
	float4 XZColor = shaderTexture.Sample(textureSampler, input.WorldPosition.xz * textureScale);
	float4 XYColor = shaderTexture.Sample(textureSampler, input.WorldPosition.xy * textureScale);
	
	output.Color = ((XZColor * blend_weights.y) + (YZColor * blend_weights.x) + (XYColor * blend_weights.z));
	output.Color.w = 1.0f;

	output.Normal = normalizedWorldNormal.xyz;//Encode(normalizedWorldNormal);
	output.Material.xy = EncodeMaterialID(1.0f); //TODO: send in material IDs
	output.Material.zw = 0.0f;

	output.Depth = (input.WorldPosition.w / farClip); //Store depth linearly.

	return output;
}